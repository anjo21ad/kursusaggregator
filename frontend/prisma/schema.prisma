generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid()) @db.VarChar(255)
  email           String           @unique
  firstName       String?
  lastName        String?
  role            UserRole         @default(USER)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  companyId       Int?
  providerId      Int?
  ai_interactions AIInteraction[]
  leads           Lead[]
  purchases       Purchase[]
  courseProgress  CourseProgress[]
  company         Company?         @relation(fields: [companyId], references: [id])
  provider        Provider?        @relation(fields: [providerId], references: [id])

  @@map("users")
}

model Company {
  id         Int        @id @default(autoincrement())
  name       String
  cvr        String?    @unique
  email      String     @unique
  phone      String?
  address    String?
  city       String?
  postalCode String?
  website    String?
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  leads      Lead[]
  purchases  Purchase[]
  users      User[]

  @@map("companies")
}

model Provider {
  id           Int            @id @default(autoincrement())
  companyName  String
  contactEmail String         @unique
  phone        String?
  website      String?
  description  String?
  address      String?
  city         String?
  postalCode   String?
  cvr          String?        @unique
  status       ProviderStatus @default(PENDING)
  approvedAt   DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  courses      Course[]
  leads        Lead[]
  users        User[]

  @@map("providers")
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  slug        String     @unique
  description String?
  isActive    Boolean    @default(true)
  parentId    Int?
  icon        String?
  imageUrl    String?
  color       String?
  sortOrder   Int        @default(0)
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  courses     Course[]

  @@map("categories")
}

model Course {
  id                                                         Int             @id @default(autoincrement())
  title                                                      String
  description                                                String
  shortDesc                                                  String?
  priceCents                                                 Int             @default(0) // Free in Phase 1-3
  duration                                                   String?
  maxParticipants                                            Int?
  location                                                   String?
  language                                                   String          @default("da")
  level                                                      String?
  status                                                     CourseStatus    @default(DRAFT)
  isActive                                                   Boolean         @default(true)
  publishedAt                                                DateTime?
  createdAt                                                  DateTime        @default(now())
  updatedAt                                                  DateTime        @updatedAt
  providerId                                                 Int?            // Optional now (AI-generated courses)
  categoryId                                                 Int

  // AI Generation Metadata
  isAIGenerated                                              Boolean         @default(false)
  aiModel                                                    String?         // e.g., "claude-sonnet-4-20250514"
  generationCostUsd                                          Decimal?        @db.Decimal(10, 2)
  generationTimeMinutes                                      Int?
  trendProposalId                                            String?         // Link to trend_proposals
  abTestVariant                                              String?         // "A" or "B"
  engagementScore                                            Int?            // Predicted engagement
  actualEngagementScore                                      Int?            // Actual engagement after publish

  // Content URLs/Storage
  curriculumJson                                             Json?           // Complete curriculum structure
  videoUrl                                                   String?
  podcastUrl                                                 String?
  transcriptUrl                                              String?

  // Content Lifecycle Management (Phase 3)
  lastViewedAt                                               DateTime?       // Track engagement for archival
  archivedAt                                                 DateTime?       // When archived
  archivalReason                                             String?         // Why archived (tech deprecation, low engagement, etc.)
  isEvergreen                                                Boolean         @default(false) // Never archive (fundamentals, high-performers)
  supersededByCourseId                                       Int?            // Points to replacement course

  ai_interactions_ai_interactions_booked_course_idTocourses  AIInteraction[] @relation("ai_interactions_booked_course_idTocourses")
  ai_interactions_ai_interactions_clicked_course_idTocourses AIInteraction[] @relation("ai_interactions_clicked_course_idTocourses")
  category                                                   Category        @relation(fields: [categoryId], references: [id])
  provider                                                   Provider?       @relation(fields: [providerId], references: [id])
  leads                                                      Lead[]
  purchases                                                  Purchase[]
  courseProgress                                             CourseProgress[]

  @@map("courses")
}

model Purchase {
  id              Int          @id @default(autoincrement())
  userId          String
  courseId        Int
  companyId       Int?
  type            PurchaseType @default(DIRECT_SALE)
  priceCents      Int
  commission      Int?
  stripeSessionId String?
  createdAt       DateTime     @default(now())
  company         Company?     @relation(fields: [companyId], references: [id])
  course          Course       @relation(fields: [courseId], references: [id])
  user            User         @relation(fields: [userId], references: [id])

  @@map("purchases")
}

model Lead {
  id          Int       @id @default(autoincrement())
  userId      String
  courseId    Int
  companyId   Int
  providerId  Int
  message     String?
  status      String    @default("NEW")
  isConverted Boolean   @default(false)
  convertedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  company     Company   @relation(fields: [companyId], references: [id])
  course      Course    @relation(fields: [courseId], references: [id])
  provider    Provider  @relation(fields: [providerId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@map("leads")
}

model AIInteraction {
  id                                                 Int       @id @default(autoincrement())
  user_id                                            String    @db.VarChar(255)
  session_id                                         String
  query                                              String
  recommendations                                    Json?
  model_used                                         String?   @default("claude-3-5-sonnet-20241022")
  prompt_version                                     String?
  response_time_ms                                   Int?
  clicked_course_id                                  Int?
  booked_course_id                                   Int?
  feedback_rating                                    Int?
  created_at                                         DateTime? @default(now()) @db.Timestamptz(6)
  courses_ai_interactions_booked_course_idTocourses  Course?   @relation("ai_interactions_booked_course_idTocourses", fields: [booked_course_id], references: [id], onUpdate: NoAction)
  courses_ai_interactions_clicked_course_idTocourses Course?   @relation("ai_interactions_clicked_course_idTocourses", fields: [clicked_course_id], references: [id], onUpdate: NoAction)
  users                                              User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([session_id], map: "idx_ai_interactions_session_id")
  @@index([user_id], map: "idx_ai_interactions_user_id")
  @@map("ai_interactions")
}

model TrendProposal {
  id                           String    @id @default(uuid())

  // Source Data
  source                       String    // 'hackernews', 'reddit', 'github', 'arxiv'
  sourceUrl                    String?
  sourceId                     String?   // External ID for deduplication

  // Trend Information
  title                        String
  description                  String?
  keywords                     String[]
  trendScore                   Int?

  // AI Analysis
  aiCourseProposal             Json      // Generated course proposal
  estimatedDurationMinutes     Int?
  estimatedGenerationCostUsd   Decimal?  @db.Decimal(10, 2)
  estimatedEngagementScore     Int?

  // Admin Decision (Phase 1) / Auto-Decision (Phase 2+)
  status                       TrendProposalStatus @default(PENDING)

  // Generation Results
  generatedCourseId            Int?
  actualGenerationCostUsd      Decimal?  @db.Decimal(10, 2)
  actualGenerationTimeMinutes  Int?

  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt

  @@index([status])
  @@index([source])
  @@index([createdAt])
  @@map("trend_proposals")
}

model CourseProgress {
  id                 Int      @id @default(autoincrement())
  userId             String
  courseId           Int

  // Progress Tracking
  currentSectionId   String?  // Which section they're on
  completedSections  String[] // Array of completed section IDs
  progressPercentage Int      @default(0)

  // Time Tracking
  totalTimeMinutes   Int      @default(0)
  lastAccessedAt     DateTime @default(now())
  startedAt          DateTime @default(now())
  completedAt        DateTime?

  // Engagement Metrics
  quizScores         Json?    // { "quiz-1": 80, "quiz-2": 90 }
  exercisesCompleted Json?    // { "exercise-1": true, "exercise-2": false }

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user               User     @relation(fields: [userId], references: [id])
  course             Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("course_progress")
}

enum UserRole {
  USER
  COMPANY_USER
  COMPANY_ADMIN
  PROVIDER
  SUPER_ADMIN
}

enum ProviderStatus {
  PENDING
  APPROVED
  SUSPENDED
  REJECTED
}

enum CourseStatus {
  DRAFT
  PENDING_REVIEW
  PUBLISHED
  ARCHIVED
}

enum PurchaseType {
  DIRECT_SALE
  LEAD_GENERATION
}

enum TrendProposalStatus {
  PENDING
  APPROVED
  REJECTED
  GENERATING
  PUBLISHED
  FAILED
}
